[tool.poetry]
name = "gpt-trader"
version = "0.1.0"
description = "Equities-first trading bot scaffold with adapter-based data, backtesting, and paper trading hooks."
authors = ["RJ + GPT-5"]
readme = "README.md"
packages = [{ include = "bot", from = "src" }]


[tool.poetry.dependencies]
python = ">=3.12,<3.13"
pandas = "^2.2.2"
numpy = "^1.26.4"
pydantic = "^2.7.4"
python-dotenv = "^1.0.1"
requests = "^2.32.3"
yfinance = "^0.2.40"
websockets = "^14.0"
tqdm = "^4.67.1"
scipy = "^1.14.0"
matplotlib = "^3.9.0"
seaborn = "^0.13.0"
alpaca-py = "^0.20.0"
rich = "^13.7.0"
pytz = "^2024.1"
pyyaml = "^6.0.1"
psutil = "^6.0.0"
aiohttp = "^3.12.15"
ta-lib = "^0.6.5"
ray = "^2.48.0"
numba = "^0.61.2"
typer = "^0.16.0"
click-completion = "^0.5.2"
plotly = "^6.2.0"
toml = "^0.10.2"
xgboost = "^3.0.4"
scikit-learn = "^1.7.1"
hmmlearn = "^0.3.3"
optuna = "^4.4.0"
cvxpy = "^1.7.1"
streamlit = "^1.48.0"

# Phase 4 - Deep Learning (optional dependencies)
torch = { version = "^2.0.0", optional = true }
tensorboard = { version = "^2.14.0", optional = true }
tensorflow = { version = "^2.13.0", optional = true }

[tool.poetry.extras]
torch = ["torch", "tensorboard"]
tensorflow = ["tensorflow", "tensorboard"]
deep-learning = ["torch", "tensorflow", "tensorboard"]

[tool.poetry.group.dev.dependencies]
# Code quality tools
ruff = "^0.5.6"
black = "^24.4.2"
mypy = "^1.10.0"
pre-commit = "^3.7.1"

# Type stubs
types-requests = "^2.32.0.20240712"
pandas-stubs = "^2.2.2.240603"
types-pyyaml = "^6.0.12"

# Testing framework
pytest = "^8.2.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pytest-xdist = "^3.0.0"
pytest-benchmark = "^4.0.0"

# Test utilities
faker = "^18.0.0"
freezegun = "^1.2.0"
hypothesis = "^6.70.0"
responses = "^0.23.0"

# Documentation
coverage = "^7.0.0"

[tool.poetry.scripts]
gpt-trader = "bot.cli.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = ["data", "scripts/pickle_scanner.py", "scripts/pickle_to_joblib.py"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "W",    # pycodestyle warnings
]
ignore = [
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "S101",    # Use of assert (common in tests)
    "E501",    # Line too long (handled by formatter)
    "ANN401",  # Dynamically typed expressions (Any)
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
ignore_missing_imports = true
explicit_package_bases = true
mypy_path = "src"



# Pytest configuration moved to pytest.ini for better organization
