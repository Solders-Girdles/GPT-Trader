{
  "v2_slice_isolation": {
    "principle": "V2 uses complete isolation - NO dependencies between slices",
    "isolation_verification": {
      "command": "grep -r \"from bot_v2.features\" src/bot_v2/features/",
      "expected_result": "No results (complete isolation)",
      "violation_action": "Fix immediately - duplicate code rather than import"
    }
  },
  "v2_slices": {
    "backtest": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["data loading", "metrics calculation", "performance analysis"],
      "test_command": "poetry run python src/bot_v2/test_backtest.py",
      "verification": "python -c \"from src.bot_v2.features.backtest import *\"",
      "token_load": "~500"
    },
    "paper_trade": {
      "dependencies": [],
      "isolation_status": "complete", 
      "local_implementations": ["position tracking", "P&L calculation", "order simulation"],
      "test_command": "poetry run python src/bot_v2/test_paper_trade.py",
      "verification": "python -c \"from src.bot_v2.features.paper_trade import *\"",
      "token_load": "~500"
    },
    "analyze": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["technical indicators", "signal generation", "pattern detection"],
      "test_command": "poetry run python src/bot_v2/test_analyze.py", 
      "verification": "python -c \"from src.bot_v2.features.analyze import *\"",
      "token_load": "~500"
    },
    "optimize": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["parameter optimization", "search algorithms", "result analysis"],
      "test_command": "poetry run python src/bot_v2/test_optimize.py",
      "verification": "python -c \"from src.bot_v2.features.optimize import *\"",
      "token_load": "~500"
    },
    "live_trade": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["broker API", "order management", "position tracking"],
      "test_command": "poetry run python src/bot_v2/test_live_trade.py",
      "verification": "python -c \"from src.bot_v2.features.live_trade import *\"",
      "token_load": "~500"
    },
    "monitor": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["health checks", "metrics collection", "alert generation"],
      "test_command": "poetry run python src/bot_v2/test_monitor.py",
      "verification": "python -c \"from src.bot_v2.features.monitor import *\"",
      "token_load": "~500"
    },
    "data": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["data fetching", "validation", "caching"],
      "test_command": "poetry run python src/bot_v2/test_data.py",
      "verification": "python -c \"from src.bot_v2.features.data import *\"",
      "token_load": "~500"
    },
    "ml_strategy": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["ML model training", "strategy selection", "confidence scoring"],
      "test_command": "poetry run python src/bot_v2/test_ml_strategy.py",
      "verification": "python -c \"from src.bot_v2.features.ml_strategy import *\"",
      "token_load": "~500",
      "status": "Week 1-2 COMPLETE - 35% improvement"
    },
    "market_regime": {
      "dependencies": [],
      "isolation_status": "complete",
      "local_implementations": ["regime detection", "market classification", "transition prediction"],
      "test_command": "poetry run python src/bot_v2/test_market_regime.py",
      "verification": "python -c \"from src.bot_v2.features.market_regime import *\"",
      "token_load": "~500",
      "status": "Week 3 COMPLETE - 7 regime types"
    }
  },
  "v2_architecture_principles": {
    "complete_isolation": "Each slice is completely self-contained",
    "no_shared_code": "Duplicate implementations rather than share",
    "local_types": "All types defined in slice's types.py",
    "independent_testing": "Each slice tests in isolation",
    "token_efficiency": "~500 tokens to load entire slice"
  },
  "v2_isolation_enforcement": {
    "pre_commit_hook": "Check for cross-slice imports before commit",
    "validation_script": "scripts/validation/validate_knowledge.py",
    "daily_checks": "Monitor slice isolation compliance",
    "violation_detection": "Automated cross-slice import detection"
  },
  "v2_development_workflow": {
    "slice_selection": "Choose single slice based on task",
    "load_slice": "Load only relevant slice (~500 tokens)",
    "modify_locally": "Make changes within slice boundaries", 
    "test_isolation": "Verify no cross-slice dependencies added",
    "independent_test": "Test slice functionality in isolation"
  },
  "v1_vs_v2_comparison": {
    "v1_archived": {
      "location": "archived/bot_v1_20250817/",
      "architecture": "Horizontal layers with dependencies",
      "complexity": "159K lines, complex dependency graph",
      "token_load": "10K+ tokens to understand",
      "status": "Archived - do not reference"
    },
    "v2_current": {
      "location": "src/bot_v2/",
      "architecture": "Vertical slices with complete isolation",
      "complexity": "8K lines, zero dependencies between slices",
      "token_load": "~500 tokens per slice",
      "status": "Active development"
    }
  },
  "breaking_changes_v2": {
    "principle": "Breaking changes contained within slice",
    "isolation_benefit": "Changes to one slice cannot break others",
    "testing_impact": "Only need to test modified slice",
    "deployment_safety": "Deploy slices independently"
  },
  "v2_verification_commands": {
    "test_all_slices": "poetry run python src/bot_v2/test_all_slices.py",
    "check_isolation": "for slice in backtest paper_trade analyze optimize live_trade monitor data ml_strategy market_regime; do grep -r \"from bot_v2.features\" \"src/bot_v2/features/$slice/\" && echo \"❌ $slice isolation violation\" || echo \"✅ $slice isolated\"; done",
    "verify_independence": "python -c \"from src.bot_v2.features.{slice} import *\" # Replace {slice} with actual slice name",
    "slice_health": "cat .knowledge/PROJECT_STATE.json | jq '.v2_slices'"
  }
}