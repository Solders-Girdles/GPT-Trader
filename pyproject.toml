[project]
name = "gpt-trader"
version = "0.1.0"
description = "Equities-first trading bot scaffold with adapter-based data, backtesting, and paper trading hooks."
readme = "README.md"
authors = [{name = "RJ + GPT-5"}]
requires-python = ">=3.12,<3.13"
dependencies = [
    "coinbase-advanced-py>=1.0.0,<2.0.0",
    "pandas>=2.2.2,<3.0.0",
    "numpy>=1.26.4,<2.0.0",
    "pydantic>=2.7.4,<3.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "requests>=2.32.3,<3.0.0",
    "websockets>=15.0,<16.0",
    "pyyaml>=6.0.1,<7.0.0",
    "psutil>=7.0.0,<8.0.0",
    "aiohttp>=3.12.15,<4.0.0",
    "redis[hiredis]>=6.0.0,<7.0.0",
    "cryptography>=46.0.0,<47.0.0",
    "pyotp>=2.9.0,<3.0.0",
]

[project.optional-dependencies]
market-data = ["yfinance>=0.2.40,<0.3.0"]

[project.scripts]
gpt-trader = "bot_v2.cli:main"
perps-bot = "bot_v2.cli:main"

[tool.poetry]
name = "gpt-trader"
version = "0.1.0"
description = "Equities-first trading bot scaffold with adapter-based data, backtesting, and paper trading hooks."
authors = ["RJ + GPT-5"]
packages = [{ include = "bot_v2", from = "src" }]

[tool.poetry.group.dev.dependencies]
ruff = "^0.13.3"
black = "^25.9.0"
mypy = "^1.18.2"
pre-commit = "^4.3.0"
yfinance = "^0.2.66"
types-requests = "^2.32.0.20250913"
pandas-stubs = "^2.3.2.250926"
types-pyyaml = "^6.0.12.20250915"
pytest = "^8.4.2"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-mock = "^3.15.1"
pytest-xdist = "^3.0.0"
pytest-benchmark = "^5.1.0"
faker = "^37.8.0"
freezegun = "^1.2.0"
hypothesis = "^6.140.2"
responses = "^0.25.8"
coverage = "^7.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = [
    "data",
    "scripts/pickle_scanner.py",
    "scripts/pickle_to_joblib.py",
    "archived",
    "demos",
    "scripts",
    "tests",
]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "W",
]
ignore = [
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN401",
    "S101",
    "E501",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ANN"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
ignore_missing_imports = true
explicit_package_bases = true
mypy_path = "src"

# Pytest configuration moved to pytest.ini for better organization

[tool.coverage.run]
source = ["src/bot_v2"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/archived/*",
]

[tool.coverage.report]
# Global minimum coverage threshold (raised after dependency updates - current: 87.52%)
fail_under = 85
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# Per-package coverage thresholds (enforced after Phase 3)
# Phase 0 targets (quick wins): 85%
# Phase 1 targets: 92%
# Phase 2 targets: 97%
# Phase 3 targets: 100%

[tool.coverage.paths]
source = ["src/bot_v2"]
