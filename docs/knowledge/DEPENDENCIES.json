{
  "component_dependencies": {
    "data_pipeline": {
      "depends_on": [],
      "required_by": ["strategies", "backtesting", "ml_pipeline", "dashboard"],
      "packages": ["yfinance", "pandas", "numpy"],
      "fix_order": 1,
      "description": "Foundation - must work before anything else"
    },
    "strategies": {
      "depends_on": ["data_pipeline"],
      "required_by": ["backtesting", "paper_trading", "live_trading"],
      "packages": ["pandas", "numpy", "talib"],
      "fix_order": 2,
      "description": "Trading logic - needs data to operate"
    },
    "risk_management": {
      "depends_on": ["strategies"],
      "required_by": ["backtesting", "paper_trading", "live_trading"],
      "packages": ["pandas", "numpy"],
      "fix_order": 3,
      "description": "Risk controls - validates strategy signals"
    },
    "portfolio": {
      "depends_on": ["strategies", "risk_management"],
      "required_by": ["backtesting", "paper_trading", "live_trading"],
      "packages": ["pandas", "numpy"],
      "fix_order": 4,
      "description": "Position allocation - uses risk limits"
    },
    "backtesting": {
      "depends_on": ["data_pipeline", "strategies", "risk_management", "portfolio"],
      "required_by": ["ml_pipeline", "dashboard"],
      "packages": ["pandas", "numpy"],
      "fix_order": 5,
      "description": "Historical simulation - needs all components"
    },
    "ml_pipeline": {
      "depends_on": ["data_pipeline", "backtesting"],
      "required_by": ["live_trading"],
      "packages": ["scikit-learn", "joblib", "pandas"],
      "fix_order": 6,
      "description": "ML models - trains on backtest results"
    },
    "paper_trading": {
      "depends_on": ["strategies", "risk_management", "portfolio"],
      "required_by": [],
      "packages": ["alpaca-py"],
      "fix_order": 7,
      "description": "Simulated live trading - needs API keys"
    },
    "live_trading": {
      "depends_on": ["strategies", "risk_management", "portfolio", "ml_pipeline"],
      "required_by": [],
      "packages": ["alpaca-py", "websocket-client"],
      "fix_order": 8,
      "description": "Real trading - needs everything working"
    },
    "dashboard": {
      "depends_on": ["data_pipeline", "backtesting"],
      "required_by": [],
      "packages": ["streamlit", "plotly"],
      "fix_order": 9,
      "description": "Visualization - displays results"
    }
  },
  "fix_sequence": [
    "data_pipeline",
    "strategies",
    "risk_management",
    "portfolio",
    "backtesting",
    "ml_pipeline",
    "paper_trading",
    "live_trading",
    "dashboard"
  ],
  "import_hierarchy": {
    "bot": {
      "config": "Configuration - import first",
      "dataflow": "Data pipeline - import second",
      "indicators": "Technical indicators - standalone",
      "strategy": "Trading strategies - depends on indicators",
      "risk": "Risk management - depends on strategy",
      "portfolio": "Portfolio allocation - depends on risk",
      "backtest": "Backtesting engine - depends on all above",
      "ml": "Machine learning - depends on backtest",
      "live": "Live trading - depends on everything",
      "dashboard": "UI - can import anything"
    }
  },
  "breaking_changes": {
    "data_pipeline": [
      "Changing DataFrame column names breaks all strategies",
      "Modifying get_data() signature breaks backtesting"
    ],
    "strategies": [
      "Changing signal format (1/0/-1) breaks portfolio allocator",
      "Modifying calculate_signals() return type breaks backtesting"
    ],
    "risk_management": [
      "Changing RiskConfig fields breaks all risk checks",
      "Modifying validate_trade() signature breaks live trading"
    ]
  },
  "test_cascade": {
    "after_fixing_data_pipeline": [
      "poetry run pytest tests/unit/dataflow/ -v",
      "poetry run pytest tests/unit/strategy/test_base_strategy.py -v",
      "poetry run pytest tests/integration/test_data_pipeline_integration.py -v"
    ],
    "after_fixing_strategies": [
      "poetry run pytest tests/unit/strategy/ -v",
      "poetry run pytest tests/unit/portfolio/ -v",
      "poetry run pytest tests/integration/test_backtest_integration.py -v"
    ],
    "after_fixing_risk": [
      "poetry run pytest tests/unit/risk/ -v",
      "poetry run pytest tests/unit/portfolio/test_allocator.py -v"
    ]
  }
}