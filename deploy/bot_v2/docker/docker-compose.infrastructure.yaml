version: "3.8"

services:
  trading-bot:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-trader}:${POSTGRES_PASSWORD:?Set POSTGRES_PASSWORD in deploy/bot_v2/docker/.env}@postgres:5432/${POSTGRES_DB:-trading_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:?Set REDIS_PASSWORD in deploy/bot_v2/docker/.env}@redis:6379/0
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-trader}:${RABBITMQ_PASSWORD:?Set RABBITMQ_PASSWORD in deploy/bot_v2/docker/.env}@rabbitmq:5672/
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200}
      VAULT_TOKEN: ${VAULT_TOKEN:?Set VAULT_TOKEN in deploy/bot_v2/docker/.env}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      vault:
        condition: service_started

  postgres:
    image: postgres:15-alpine
    container_name: bot_v2_postgres
    hostname: postgres
    profiles:
      - infra
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-trader}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Set POSTGRES_PASSWORD in deploy/bot_v2/docker/.env}
      POSTGRES_DB: ${POSTGRES_DB:-trading_db}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER:-trader} -d $${POSTGRES_DB:-trading_db}",
        ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  redis:
    image: redis:7-alpine
    container_name: bot_v2_redis
    hostname: redis
    profiles:
      - infra
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?Set REDIS_PASSWORD in deploy/bot_v2/docker/.env}
    command: >
      sh -c "redis-server --appendonly yes --requirepass $$REDIS_PASSWORD"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: bot_v2_rabbitmq
    hostname: rabbitmq
    profiles:
      - infra
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-trader}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:?Set RABBITMQ_PASSWORD in deploy/bot_v2/docker/.env}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  vault:
    image: vault:latest
    container_name: bot_v2_vault
    hostname: vault
    profiles:
      - infra
    env_file:
      - .env
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN_ID:-development_token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault_data:/vault/file
    ports:
      - "8200:8200"
    networks:
      - trading-network
    restart: unless-stopped
    command: server -dev

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: bot_v2_elasticsearch
    hostname: elasticsearch
    profiles:
      - observability
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: "false"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: bot_v2_kibana
    hostname: kibana
    profiles:
      - observability
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: bot_v2_jaeger
    hostname: jaeger
    profiles:
      - observability
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    networks:
      - trading-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: bot_v2_nginx
    hostname: nginx
    profiles:
      - production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      - trading-bot

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  vault_data:
    driver: local
  elasticsearch_data:
    driver: local
