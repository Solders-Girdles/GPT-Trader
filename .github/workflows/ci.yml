name: Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Prepare Python environment
      id: setup-poetry
      uses: ./.github/actions/setup-poetry
      with:
        python-version: ${{ matrix.python-version }}

    - name: Generate dependency artifacts
      if: github.event_name == 'pull_request'
      run: |
        poetry run python scripts/analysis/dependency_map.py --tests "tests/**/*.py" --output dependency_report.json
        poetry run python scripts/analysis/test_categorizer.py --output test_categories.json

    - name: Run selective tests
      if: github.event_name == 'pull_request'
      env:
        PYTEST_ADDOPTS: '-m "not slow and not performance" -q'
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
        CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD -- '*.py' | tr '\n' ' ')
        if [ -z "$CHANGED" ]; then
          poetry run python scripts/testing/selective_runner.py \
            --deps dependency_report.json \
            --categories test_categories.json \
            --max-selective-ratio 0.7 \
            --auto-full-module bot_v2.features.brokerages.core.interfaces
        else
          poetry run python scripts/testing/selective_runner.py \
            --deps dependency_report.json \
            --categories test_categories.json \
            --paths $CHANGED \
            --max-selective-ratio 0.7 \
            --auto-full-module bot_v2.features.brokerages.core.interfaces
        fi

    - name: Lint with ruff
      run: |
        poetry run ruff check .

    - name: Check formatting with black
      run: |
        poetry run black --check .

    - name: Type-check with mypy
      run: |
        poetry run mypy src --ignore-missing-imports

    - name: Run Coinbase core checks
      run: |
        poetry run pytest tests/unit/bot_v2/features/brokerages/coinbase -q

    - name: Run tests with pytest and generate coverage report
      if: github.event_name != 'pull_request'
      run: |
        poetry run pytest -m "not slow and not performance" -q \
          --cov=bot_v2/cli \
          --cov=bot_v2/config \
          --cov=bot_v2/features/brokerages/coinbase/client \
          --cov=bot_v2/features/brokerages/coinbase/utilities \
          --cov-report=term --cov-report=xml --cov-report=html --cov-fail-under=75

    - name: Upload coverage to Artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml
        path: coverage.xml

    - name: Upload HTML coverage report
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: htmlcov

  test-config-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_mode: ['prod', 'sandbox', 'prod_fallback', 'sandbox_fallback']
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v5

    - name: Prepare Python environment
      id: setup-poetry
      uses: ./.github/actions/setup-poetry
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run config tests
      env:
        BROKER: coinbase
        # Production with specific keys
        COINBASE_PROD_API_KEY: ${{ matrix.env_mode == 'prod' && 'prod_key' || '' }}
        COINBASE_PROD_API_SECRET: ${{ matrix.env_mode == 'prod' && 'prod_secret' || '' }}
        # Sandbox with specific keys
        COINBASE_SANDBOX: ${{ (matrix.env_mode == 'sandbox' || matrix.env_mode == 'sandbox_fallback') && '1' || '0' }}
        COINBASE_SANDBOX_API_KEY: ${{ matrix.env_mode == 'sandbox' && 'sandbox_key' || '' }}
        COINBASE_SANDBOX_API_SECRET: ${{ matrix.env_mode == 'sandbox' && 'sandbox_secret' || '' }}
        # Fallback keys
        COINBASE_API_KEY: ${{ (matrix.env_mode == 'prod_fallback' || matrix.env_mode == 'sandbox_fallback') && 'fallback_key' || '' }}
        COINBASE_API_SECRET: ${{ (matrix.env_mode == 'prod_fallback' || matrix.env_mode == 'sandbox_fallback') && 'fallback_secret' || '' }}
      run: |
        poetry run pytest tests/unit/bot_v2/orchestration/test_config_manager.py tests/unit/bot_v2/orchestration/test_configuration.py
