name: Specialized Suites

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/bot_v2/features/brokerages/coinbase/**'
      - 'tests/unit/bot_v2/features/brokerages/coinbase/**'
      - 'src/bot_v2/features/live_trade/**'
      - 'src/bot_v2/features/brokerages/**'
      - 'tests/**/live_trade/**'
      - 'tests/**/perps/**'
      - 'scripts/run_perps_bot.py'
      - 'scripts/validation/**'
      - '.github/workflows/specialized-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/bot_v2/features/brokerages/coinbase/**'
      - 'tests/unit/bot_v2/features/brokerages/coinbase/**'
      - 'src/bot_v2/features/live_trade/**'
      - 'src/bot_v2/features/brokerages/**'
      - 'tests/**/live_trade/**'
      - 'tests/**/perps/**'
      - 'scripts/run_perps_bot.py'
      - 'scripts/validation/**'
      - '.github/workflows/specialized-tests.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write

jobs:
  specialized:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - suite: coinbase-advanced
            type: coinbase-api
            api_mode: advanced
            base_url: https://api.coinbase.com
            needs_passphrase: false
          - suite: coinbase-exchange
            type: coinbase-api
            api_mode: exchange
            base_url: https://api-public.sandbox.exchange.coinbase.com
            needs_passphrase: true
          - suite: coinbase-integration
            type: coinbase-integration
            api_mode: advanced
            base_url: https://api.coinbase.com
            needs_passphrase: false
          - suite: perps
            type: perps
            api_mode: ""
            base_url: ""
            needs_passphrase: false

    steps:
      - uses: actions/checkout@v5

      - name: Prepare Python environment
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          python-version: "3.12"

      - name: Configure Coinbase API mode
        if: startsWith(matrix.suite, 'coinbase')
        run: |
          echo "COINBASE_API_MODE=${{ matrix.api_mode }}" >> $GITHUB_ENV
          echo "COINBASE_API_BASE=${{ matrix.base_url }}" >> $GITHUB_ENV
          echo "COINBASE_API_KEY=test-key" >> $GITHUB_ENV
          echo "COINBASE_API_SECRET=test-secret" >> $GITHUB_ENV
          if [ "${{ matrix.needs_passphrase }}" = "true" ]; then
            echo "COINBASE_API_PASSPHRASE=test-pass" >> $GITHUB_ENV
          fi

      - name: Run Coinbase unit suite
        if: matrix.type == 'coinbase-api'
        run: |
          set -euo pipefail
          poetry run pytest tests/unit/bot_v2/features/brokerages/coinbase -v --maxfail=1 --durations=10
          poetry run pytest tests/unit/bot_v2/orchestration/test_broker_factory.py -v

      - name: Run Coinbase integration smoke
        if: matrix.type == 'coinbase-integration'
        run: |
          set -euo pipefail
          poetry run pytest tests/unit/bot_v2/features/brokerages/coinbase/test_adapter_integration.py -v
          poetry run python - <<'PY'
          from src.bot_v2.features.brokerages.coinbase.ws import CoinbaseWebSocket, SequenceGuard
          import sys
          import types

          mock_ws = types.ModuleType('websocket')
          mock_ws.create_connection = lambda url: None
          sys.modules['websocket'] = mock_ws

          ws = CoinbaseWebSocket('wss://test')
          ws.connect()
          assert ws._transport is not None

          guard = SequenceGuard()
          msg = guard.annotate({'sequence': 1})
          assert 'gap_detected' not in msg
          msg = guard.annotate({'sequence': 3})
          assert msg.get('gap_detected') is True
          PY

      - name: Run perps validation suite
        if: matrix.type == 'perps'
        env:
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          set -euo pipefail

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_unit"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run pytest tests/unit/bot_v2/features/live_trade -q --tb=short

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_orchestration"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run pytest \
            tests/unit/bot_v2/orchestration/test_live_execution_perps.py \
            tests/unit/bot_v2/features/live_trade/test_type_consolidation.py \
            -q --tb=short

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_validation"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run python scripts/validation/validate_perps_e2e.py

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_paper"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run python scripts/validation/paper_mode_e2e.py

          poetry run python -m bot_v2.cli --help

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_dev"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run python scripts/run_perps_bot.py --profile dev --dry-run --dev-fast --symbols BTC-PERP
          test -f "$EVENT_STORE_ROOT/perps_bot/dev/health.json"
          test -f "$EVENT_STORE_ROOT/perps_bot/dev/last_state.json"

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_demo"
          mkdir -p "$EVENT_STORE_ROOT"
          COINBASE_SANDBOX='1' PERPS_FORCE_MOCK='1' poetry run python scripts/run_perps_bot.py --profile demo --dev-fast --reduce-only --symbols BTC-PERP
          test -f "$EVENT_STORE_ROOT/perps_bot/demo/health.json"
          test -f "$EVENT_STORE_ROOT/perps_bot/demo/last_state.json"
