============================================================
Financial Constants Migration Report
============================================================

Found 89 hardcoded values to migrate:


src/bot/dataflow/streaming_data.py:
  Line 90: return float(self.spread / self.mid_price * 10000)...
  Line 158: self.completed_bars: deque = deque(maxlen=10000)  # Store recent completed bars...
  Line 273: self.recent_quotes: deque = deque(maxlen=10000)...
  Line 274: self.recent_trades: deque = deque(maxlen=10000)...

src/bot/monitor/live_risk_monitor_v2.py:
  Line 52: max_portfolio_var: Decimal = Decimal('10000')...

src/bot/monitor/alerting_system.py:
  Line 522: event_id = f"alert_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{event_type}_{hash...

src/bot/monitor/live_dashboard.py:
  Line 72: total_capital: Decimal = Decimal('100000')...
  Line 74: cash_balance: Decimal = Decimal('100000')...
  Line 75: portfolio_value: Decimal = Decimal('100000')...
  Line 465: portfolio_value = Decimal('100000')  # Starting capital...
  Line 475: portfolio_value = Decimal(str(status.get('current_capital', 100000)))...

src/bot/monitor/strategy_health_monitor.py:
  Line 617: return_pct = pnl / 10000  # Assume $10k position size...

src/bot/core/metrics.py:
  Line 216: DEFAULT_BUCKETS = [0.1, 0.5, 1, 2.5, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5...

src/bot/core/observability.py:
  Line 540: self.alert_history: deque = deque(maxlen=10000)...

src/bot/core/exceptions.py:
  Line 70: self.error_id = f"err_{self.timestamp.strftime('%Y%m%d_%H%M%S')}_{hash(message) ...

src/bot/core/analytics.py:
  Line 729: "queue_size": {"type": "int", "min": 100, "max": 10000},...
  Line 804: queue_factor = min(1.0, config.get("queue_size", 1000) / 10000.0)...

src/bot/intelligence/phase3_integration.py:
  Line 175: 'volume': np.random.randint(100000, 1000000, n_days)...

src/bot/intelligence/reinforcement_learning.py:
  Line 91: buffer_size: int = 100000...
  Line 197: initial_balance: float = 10000.0):...

src/bot/distributed/ray_engine.py:
  Line 89: initial_cash: float = 100000,...
  Line 199: initial_cash: float = 100000,...
  Line 348: initial_cash: float = 100000,...

src/bot/optimization/deployment_pipeline.py:
  Line 39: deployment_budget: float = Field(10000.0, description="Total deployment budget")...
  Line 430: deployment_budget=10000.0,...

src/bot/optimization/parallel_optimizer.py:
  Line 33: initial_cash: float = 100000...
  Line 496: initial_cash=100000,...

src/bot/cli/enhanced_cli.py:
  Line 384: values = 100000 + np.cumsum(np.random.randn(days) * 1000)...

src/bot/cli/live.py:
  Line 126: default=100000.0,...
  Line 127: help="Assumed portfolio value for estimation (default: 100000)",...

src/bot/backtest/engine.py:
  Line 35: equity0 = 100000.0...

src/bot/paper_trading/deployment_pipeline.py:
  Line 66: initial_capital: float = 100000.0      # $100k default...

src/bot/realtime/data_pipeline.py:
  Line 82: buffer_size: int = 10000...
  Line 141: def __init__(self, size: int = 10000):...
  Line 514: self.process_queue = queue.Queue(maxsize=10000)...

src/bot/scaling/auto_scaler.py:
  Line 645: volume = np.random.uniform(20000, 100000)...
  Line 649: volume = np.random.uniform(100000, 500000)...

src/bot/ml/transformer_models.py:
  Line 67: (-math.log(10000.0) / d_model))...

src/bot/ml/reinforcement_learning.py:
  Line 41: initial_balance: float = 100000...
  Line 64: buffer_size: int = 100000  # Replay buffer...

src/bot/ml/gpu_accelerator.py:
  Line 432: initial_cash: float = 100000...
  Line 490: def benchmark_gpu(self, data_size: int = 10000) -> Dict[str, Any]:...

src/bot/live/production_orchestrator.py:
  Line 64: assumed_portfolio_value: float = 100000.0  # Used for estimation when broker val...
  Line 518: sum(pos.get("market_value", 0) for pos in positions.values()) if positions else ...
  Line 768: portfolio_value = 100000  # Would get from broker...

src/bot/live/event_driven_architecture.py:
  Line 172: max_buffer_size: int = 10000...
  Line 898: max_buffer_size: int = 10000,...
  Line 940: return total_volume > 100000...
  Line 978: 'volume': 25000 + i * 10000,...

src/bot/live/risk_monitor.py:
  Line 593: self.alert_history = deque(maxlen=10000)...

src/bot/live/trading_engine_v2.py:
  Line 189: initial_capital: float = 100000.0,...
  Line 545: slippage_factor = Decimal(str(1 + slippage_bps / 10000))...
  Line 850: initial_capital: float = 100000.0,...

src/bot/live/phase4_integration.py:
  Line 118: max_market_data_rate: int = 10000  # messages per second...
  Line 178: 'volume': np.random.randint(100, 10000),...
  Line 351: max_order_value=100000.0...
  Line 444: portfolio_values = [100000 + np.random.normal(0, 1000) for _ in range(50)]...
  Line 446: symbol: np.random.uniform(-10000, 10000) for symbol in self.test_symbols[:5]...
  Line 624: base_portfolio_value = 100000...
  Line 831: portfolio_value = 100000.0...

src/bot/live/market_data_pipeline.py:
  Line 110: max_buffer_size: int = 10000...

src/bot/live/order_management.py:
  Line 210: max_order_value: float = 100000.0...

src/bot/live/performance_tracker.py:
  Line 307: 'commission_rate_bps': (total_commission / total_volume * 10000) if total_volume...
  Line 308: 'slippage_rate_bps': (total_slippage / total_volume * 10000) if total_volume > 0...
  Line 889: base_portfolio_value = 100000...

src/bot/exec/order_management.py:
  Line 735: slippage_factor = Decimal(str(1 + slippage_bps / 10000))...
  Line 809: market_impact = (average_fill_price - arrival_price) / arrival_price * 10000  # ...
  Line 811: market_impact = (arrival_price - average_fill_price) / arrival_price * 10000  # ...
  Line 818: total_cost_bps = market_impact_bps + timing_cost_bps + float(total_commission / ...

src/bot/api/gateway.py:
  Line 120: initial_capital: float = Field(gt=0, default=100000)...
  Line 564: "equity_curve": [100000 + i * 1000 + np.random.normal(0, 500) for i in range(100...
  Line 609: "volume": np.random.uniform(1000, 10000),...
  Line 638: "volume": np.random.uniform(1000, 10000)...

src/bot/monitoring/production_monitor.py:
  Line 650: portfolio_value = 100000 + np.random.normal(0, 1000)...

src/bot/risk/advanced_optimization.py:
  Line 98: simulation_samples: int = 10000  # For Monte Carlo methods...

src/bot/risk/circuit_breakers.py:
  Line 132: initial_capital: Decimal = Decimal('100000'),...
  Line 861: initial_capital: Decimal = Decimal('100000'),...

src/bot/strategy/talib_optimized_ma.py:
  Line 321: n_days = 10000  # Larger dataset for better benchmarking...

src/bot/strategy/persistence.py:
  Line 84: capital_requirements: float = 10000.0...
  Line 1148: capital_requirements=10000.0,...

src/bot/strategy/training_pipeline.py:
  Line 255: initial_capital=100000.0...
  Line 308: initial_capital=100000.0...
  Line 441: initial_capital=100000.0...
  Line 682: initial_capital=100000.0...
  Line 757: initial_capital=100000.0...
  Line 801: initial_capital=100000.0...
  Line 833: initial_capital=100000.0,...
  Line 834: commission_rate=cost_bps / 10000.0  # Convert bps to decimal...

src/bot/live/cycles/risk.py:
  Line 41: sum(pos.get("market_value", 0) for pos in positions.values()) if positions else ...

============================================================
Migration Strategy:
============================================================

1. Files that need imports:
   from bot.config import get_config
   
2. Replace hardcoded values:
   100000 -> get_config().financial.capital.initial_capital
   10000  -> get_config().financial.capital.deployment_budget
   
3. For class defaults, use None and load in __post_init__:
   initial_capital: float = None
   
   def __post_init__(self):
       if self.initial_capital is None:
           config = get_config()
           self.initial_capital = float(config.financial.capital.initial_capital)
