version: '3.8'

services:
  # ML Paper Trader Service
  ml-trader:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    container_name: gpt-trader-ml
    restart: unless-stopped
    environment:
      - LOG_LEVEL=INFO
      - TRADING_MODE=paper
      - ML_ENABLED=true
      - RETRAIN_INTERVAL=7
      - INITIAL_CAPITAL=100000
      - DATABASE_URL=sqlite:///data/trading.db
      - MODEL_PATH=/app/models
      - REPORT_PATH=/app/reports
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./reports:/app/reports
      - ./config:/app/config:ro
    ports:
      - "8501:8501"  # Streamlit dashboard
      - "8000:8000"  # API server
    networks:
      - trader-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "from src.bot.health import health_check; health_check()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit Dashboard
  dashboard:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.dashboard
    container_name: gpt-trader-dashboard
    restart: unless-stopped
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_THEME_BASE=dark
      - DATABASE_URL=postgresql://trader:password@postgres:5432/trading
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
    ports:
      - "8501:8501"
    networks:
      - trader-network
    depends_on:
      - postgres

  # Redis for caching and queuing
  redis:
    image: redis:7-alpine
    container_name: gpt-trader-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trader-network
    command: redis-server --appendonly yes

  # PostgreSQL for production data
  postgres:
    image: postgres:15-alpine
    container_name: gpt-trader-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=trading
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - trader-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gpt-trader-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trader-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: gpt-trader-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - trader-network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: gpt-trader-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trader-network
    depends_on:
      - ml-trader
      - dashboard

networks:
  trader-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
