services:
  # Main Trading Bot Application
  trading-bot:
    build:
      context: ../../..
      dockerfile: deploy/bot_v2/docker/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: bot_v2_main
    hostname: trading-bot
    command: ["python", "-m", "bot_v2", "--profile", "canary", "--interval", "60"]
    environment:
      - ENV=${ENV:-staging}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
      - BROKER=mock
      - PERPS_FORCE_MOCK=1
      - PERPS_PAPER=1
      - PERPS_ENABLE_STREAMING=0
      - DATABASE_URL=postgresql://trader:trader123@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://trader:trader123@rabbitmq:5672/
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development_secret_key_change_in_production}
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN:-development_token}
    volumes:
      - ../../..:/app:cached  # Mount source code for development
      - bot_logs:/app/logs
      - bot_data:/app/data
      - bot_cache:/app/cache
    ports:
      - "8080:8080"   # Web interface
      - "8443:8443"   # Secure API
      - "9090:9090"   # Metrics endpoint
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    # Health check disabled for CLI interval mode (no HTTP server)
    # healthcheck:
    #   test: ["CMD", "pgrep", "-f", "python -m bot_v2"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bot_v2_postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=trader123
      - POSTGRES_DB=trading_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bot_v2_redis
    hostname: redis
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: bot_v2_rabbitmq
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=trader
      - RABBITMQ_DEFAULT_PASS=trader123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HashiCorp Vault (for secrets management)
  vault:
    image: hashicorp/vault:latest
    container_name: bot_v2_vault
    hostname: vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=development_token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/file
    ports:
      - "8200:8200"
    networks:
      - trading-network
    restart: unless-stopped
    command: server -dev

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: bot_v2_prometheus
    hostname: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      - trading-bot

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: bot_v2_grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: bot_v2_elasticsearch
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (Log Visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: bot_v2_kibana
    hostname: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: bot_v2_jaeger
    hostname: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"   # Zipkin/Thrift
      - "6831:6831/udp"   # Compact Thrift
      - "6832:6832/udp"   # Binary Thrift
      - "5778:5778"       # Config HTTP
      - "16686:16686"     # Web UI
      - "14268:14268"     # HTTP Collector
      - "14250:14250"     # gRPC
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
    networks:
      - trading-network
    restart: unless-stopped

  # NGINX Reverse Proxy (Production only)
  nginx:
    image: nginx:alpine
    container_name: bot_v2_nginx
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      - trading-bot
    profiles:
      - production

# Networks
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  vault_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  bot_logs:
    driver: local
  bot_data:
    driver: local
  bot_cache:
    driver: local
