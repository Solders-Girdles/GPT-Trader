name: Targeted Suites

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/bot_v2/features/brokerages/coinbase/**'
      - 'src/bot_v2/features/brokerages/core/**'
      - 'src/bot_v2/features/live_trade/**'
      - 'tests/unit/bot_v2/features/brokerages/coinbase/**'
      - 'tests/unit/bot_v2/features/live_trade/**'
      - 'tests/unit/bot_v2/orchestration/test_broker_factory.py'
      - 'tests/unit/bot_v2/orchestration/test_live_execution_perps.py'
      - 'tests/unit/bot_v2/orchestration/test_configuration.py'
      - 'tests/unit/bot_v2/orchestration/test_config_manager.py'
      - 'tests/**/perps/**'
      - 'scripts/run_perps_bot.py'
      - 'scripts/validation/**'
      - '.github/workflows/targeted-suites.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/bot_v2/features/brokerages/coinbase/**'
      - 'src/bot_v2/features/brokerages/core/**'
      - 'src/bot_v2/features/live_trade/**'
      - 'tests/unit/bot_v2/features/brokerages/coinbase/**'
      - 'tests/unit/bot_v2/features/live_trade/**'
      - 'tests/unit/bot_v2/orchestration/test_broker_factory.py'
      - 'tests/unit/bot_v2/orchestration/test_live_execution_perps.py'
      - 'tests/unit/bot_v2/orchestration/test_configuration.py'
      - 'tests/unit/bot_v2/orchestration/test_config_manager.py'
      - 'tests/**/perps/**'
      - 'scripts/run_perps_bot.py'
      - 'scripts/validation/**'
      - '.github/workflows/targeted-suites.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: bash --noprofile --norc {0}

env:
  PYTHON_VERSION: "3.12"

jobs:
  targeted:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - suite: coinbase-advanced
            category: coinbase-api
            api_mode: advanced
            base_url: https://api.coinbase.com
            needs_passphrase: false
          - suite: coinbase-exchange
            category: coinbase-api
            api_mode: exchange
            base_url: https://api-public.sandbox.exchange.coinbase.com
            needs_passphrase: true
          - suite: coinbase-integration
            category: coinbase-integration
            api_mode: advanced
            base_url: https://api.coinbase.com
            needs_passphrase: false
          - suite: perps
            category: perps
          - suite: live-trade-types
            category: type-consolidation

    steps:
      - uses: actions/checkout@v5

      - name: Prepare Python environment
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure Coinbase API mode
        if: startsWith(matrix.suite, 'coinbase')
        run: |
          set -euo pipefail
          echo "COINBASE_API_MODE=${{ matrix.api_mode }}" >> $GITHUB_ENV
          echo "COINBASE_API_BASE=${{ matrix.base_url }}" >> $GITHUB_ENV
          echo "COINBASE_API_KEY=test-key" >> $GITHUB_ENV
          echo "COINBASE_API_SECRET=test-secret" >> $GITHUB_ENV
          if [ "${{ matrix.needs_passphrase }}" = "true" ]; then
            echo "COINBASE_API_PASSPHRASE=test-pass" >> $GITHUB_ENV
          fi

      - name: Run Coinbase unit suite
        if: matrix.category == 'coinbase-api'
        run: |
          set -euo pipefail
          poetry run pytest tests/unit/bot_v2/features/brokerages/coinbase -v --maxfail=1 --durations=10
          poetry run pytest tests/unit/bot_v2/orchestration/test_broker_factory.py -v

      - name: Run Coinbase integration smoke
        if: matrix.category == 'coinbase-integration'
        run: |
          set -euo pipefail
          export PYTHONPATH="${GITHUB_WORKSPACE}${PYTHONPATH:+:$PYTHONPATH}"
          poetry run pytest tests/unit/bot_v2/features/brokerages/coinbase/test_adapter_integration.py -v
          poetry run python - <<'PY'
          import os
          import sys
          import types

          workspace = os.getcwd()
          src_path = os.path.join(workspace, "src")
          if src_path not in sys.path:
            sys.path.insert(0, src_path)
          if workspace not in sys.path:
            sys.path.insert(0, workspace)

          from src.bot_v2.features.brokerages.coinbase.ws import CoinbaseWebSocket, SequenceGuard

          mock_ws = types.ModuleType('websocket')
          mock_ws.create_connection = lambda url: None
          sys.modules['websocket'] = mock_ws

          ws = CoinbaseWebSocket('wss://test')
          ws.connect()
          assert ws._transport is not None

          guard = SequenceGuard()
          first = guard.annotate({'sequence': 1})
          assert 'gap_detected' not in first
          second = guard.annotate({'sequence': 3})
          assert second.get('gap_detected') is True
          PY

      - name: Run perps validation suite
        if: matrix.category == 'perps'
        env:
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          set -euo pipefail
          export PYTHONPATH="${GITHUB_WORKSPACE}${PYTHONPATH:+:$PYTHONPATH}"

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_unit"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run pytest tests/unit/bot_v2/features/live_trade -q --tb=short

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_orchestration"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run pytest \
            tests/unit/bot_v2/orchestration/test_live_execution_perps.py \
            tests/unit/bot_v2/features/live_trade/test_type_consolidation.py \
            -q --tb=short

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_validation"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run python scripts/validation/validate_perps_e2e.py

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_paper"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run python scripts/validation/paper_mode_e2e.py

          poetry run python -m bot_v2.cli --help

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_dev"
          mkdir -p "$EVENT_STORE_ROOT"
          poetry run python scripts/run_perps_bot.py --profile dev --dry-run --dev-fast --symbols BTC-PERP
          test -f "$EVENT_STORE_ROOT/perps_bot/dev/health.json"
          test -f "$EVENT_STORE_ROOT/perps_bot/dev/last_state.json"

          export EVENT_STORE_ROOT="$RUNNER_TEMP/event_store_demo"
          mkdir -p "$EVENT_STORE_ROOT"
          COINBASE_SANDBOX='1' PERPS_FORCE_MOCK='1' poetry run python scripts/run_perps_bot.py --profile demo --dev-fast --reduce-only --symbols BTC-PERP
          test -f "$EVENT_STORE_ROOT/perps_bot/demo/health.json"
          test -f "$EVENT_STORE_ROOT/perps_bot/demo/last_state.json"

      - name: Run type consolidation checks
        if: matrix.category == 'type-consolidation'
        run: |
          set -euo pipefail
          poetry run pytest tests/unit/bot_v2/features/live_trade/test_type_consolidation.py -v
          ! grep -E "^class (Order|Position|Quote|OrderType|OrderSide|OrderStatus)\s" src/bot_v2/features/live_trade/types.py
          ! grep -E "return .*(LocalOrder|LocalQuote|LocalPosition)" src/bot_v2/features/live_trade/brokers.py
          ! grep -E "core_to_local_(order|quote|position)" src/bot_v2/features/live_trade/
          ! rg -n "from .*live_trade\.types .*(Order\b|OrderSide\b|OrderType\b|Position\b|Quote\b)" -S
          ! rg -n "from \.types .*(Order\b|OrderSide\b|OrderType\b)" src/bot_v2/features/live_trade/ -S
