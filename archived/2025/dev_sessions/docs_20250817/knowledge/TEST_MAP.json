{
  "v2_slice_testing": {
    "backtest_slice": {
      "slice_test": "src/bot_v2/test_backtest.py",
      "slice_location": "src/bot_v2/features/backtest/",
      "quick_check": "python -c 'from src.bot_v2.features.backtest import *; print(\"✅ Backtest slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/backtest/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_backtest.py",
      "components": {
        "backtest_engine": "BacktestEngine (local implementation)",
        "performance_metrics": "PerformanceMetrics (local implementation)",
        "data_loader": "DataLoader (local implementation)"
      }
    },
    "paper_trade_slice": {
      "slice_test": "src/bot_v2/test_paper_trade.py",
      "slice_location": "src/bot_v2/features/paper_trade/",
      "quick_check": "python -c 'from src.bot_v2.features.paper_trade import *; print(\"✅ Paper Trade slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/paper_trade/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_paper_trade.py",
      "components": {
        "position_tracker": "PositionTracker (local implementation)",
        "pnl_calculator": "PnLCalculator (local implementation)",
        "order_simulator": "OrderSimulator (local implementation)"
      }
    },
    "analyze_slice": {
      "slice_test": "src/bot_v2/test_analyze.py",
      "slice_location": "src/bot_v2/features/analyze/",
      "quick_check": "python -c 'from src.bot_v2.features.analyze import *; print(\"✅ Analyze slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/analyze/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_analyze.py",
      "components": {
        "technical_indicators": "TechnicalIndicators (local implementation)",
        "signal_generator": "SignalGenerator (local implementation)",
        "pattern_detector": "PatternDetector (local implementation)"
      }
    },
    "optimize_slice": {
      "slice_test": "src/bot_v2/test_optimize.py",
      "slice_location": "src/bot_v2/features/optimize/",
      "quick_check": "python -c 'from src.bot_v2.features.optimize import *; print(\"✅ Optimize slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/optimize/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_optimize.py",
      "components": {
        "parameter_optimizer": "ParameterOptimizer (local implementation)",
        "search_algorithms": "SearchAlgorithms (local implementation)",
        "result_analyzer": "ResultAnalyzer (local implementation)"
      }
    },
    "ml_strategy_slice": {
      "slice_test": "src/bot_v2/test_ml_strategy.py",
      "slice_location": "src/bot_v2/features/ml_strategy/",
      "quick_check": "python -c 'from src.bot_v2.features.ml_strategy import *; print(\"✅ ML Strategy slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/ml_strategy/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_ml_strategy.py",
      "intelligence_status": "Week 1-2 COMPLETE - 35% improvement",
      "components": {
        "ml_model_trainer": "MLModelTrainer (local implementation)",
        "strategy_selector": "predict_best_strategy function",
        "confidence_scorer": "ConfidenceScorer (local implementation)"
      }
    },
    "market_regime_slice": {
      "slice_test": "src/bot_v2/test_market_regime.py",
      "slice_location": "src/bot_v2/features/market_regime/",
      "quick_check": "python -c 'from src.bot_v2.features.market_regime import *; print(\"✅ Market Regime slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/market_regime/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_market_regime.py",
      "intelligence_status": "Week 3 COMPLETE - 7 regime types",
      "components": {
        "regime_detector": "detect_regime function",
        "market_classifier": "MarketClassifier (local implementation)",
        "transition_predictor": "TransitionPredictor (local implementation)"
      }
    },
    "live_trade_slice": {
      "slice_test": "src/bot_v2/test_live_trade.py",
      "slice_location": "src/bot_v2/features/live_trade/",
      "quick_check": "python -c 'from src.bot_v2.features.live_trade import *; print(\"✅ Live Trade slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/live_trade/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_live_trade.py",
      "components": {
        "broker_api": "BrokerAPI (local implementation)",
        "order_manager": "OrderManager (local implementation)",
        "position_tracker": "PositionTracker (local implementation)"
      }
    },
    "monitor_slice": {
      "slice_test": "src/bot_v2/test_monitor.py",
      "slice_location": "src/bot_v2/features/monitor/",
      "quick_check": "python -c 'from src.bot_v2.features.monitor import *; print(\"✅ Monitor slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/monitor/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_monitor.py",
      "components": {
        "health_checker": "HealthChecker (local implementation)",
        "metrics_collector": "MetricsCollector (local implementation)",
        "alert_generator": "AlertGenerator (local implementation)"
      }
    },
    "data_slice": {
      "slice_test": "src/bot_v2/test_data.py",
      "slice_location": "src/bot_v2/features/data/",
      "quick_check": "python -c 'from src.bot_v2.features.data import *; print(\"✅ Data slice loads\")'",
      "isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/data/ && echo '❌ Isolation violation' || echo '✅ Isolated'",
      "full_test": "poetry run python src/bot_v2/test_data.py",
      "components": {
        "data_fetcher": "DataFetcher (local implementation)",
        "data_validator": "DataValidator (local implementation)",
        "data_cache": "DataCache (local implementation)"
      }
    }
  },
  "v1_archived_tests": {
    "strategies": {
      "unit_tests": [
        "tests/unit/strategy/test_base_strategy.py",
        "tests/unit/strategy/test_demo_ma.py",
        "tests/unit/strategy/test_trend_breakout.py",
        "tests/unit/strategy/test_base_strategy_comprehensive.py"
      ],
      "integration_tests": [
        "tests/integration/pipelines/test_strategy_pipeline_integration.py",
        "tests/integration/pipelines/test_strategy_pipeline_simplified.py"
      ],
      "quick_check": "python -c 'from bot_v2.features.strategy import AVAILABLE_STRATEGIES; print(len(AVAILABLE_STRATEGIES))'",
      "full_test": "poetry run pytest tests/unit/strategy/ -v",
      "specific_tests": {
        "test_demo_ma_signals": "tests/unit/strategy/test_demo_ma.py::TestDemoMAStrategy::test_calculate_signals",
        "test_trend_breakout": "tests/unit/strategy/test_trend_breakout.py::TestTrendBreakoutStrategy",
        "test_strategy_factory": "tests/unit/strategy/test_base_strategy.py::test_strategy_factory"
      }
    },
    "risk_management": {
      "unit_tests": [
        "tests/unit/risk/test_integration.py",
        "tests/unit/risk/test_simple_risk_manager.py",
        "tests/unit/risk/test_safety_systems.py"
      ],
      "integration_tests": [],
      "quick_check": "python -c 'from bot_v2.features.risk.config import RiskConfig; RiskConfig()'",
      "full_test": "poetry run pytest tests/unit/risk/ -v",
      "specific_tests": {
        "test_risk_config": "tests/unit/risk/test_integration.py::TestRiskConfig",
        "test_position_limits": "tests/unit/risk/test_simple_risk_manager.py::test_position_limits",
        "test_circuit_breaker": "tests/unit/risk/test_safety_systems.py::test_circuit_breaker"
      }
    },
    "portfolio": {
      "unit_tests": [
        "tests/unit/portfolio/test_allocator.py"
      ],
      "integration_tests": [
        "tests/integration/test_strategy_allocator_bridge.py"
      ],
      "quick_check": "python -c 'from bot_v2.features.portfolio.allocator import PortfolioAllocator'",
      "full_test": "poetry run pytest tests/unit/portfolio/ -v",
      "specific_tests": {
        "test_allocation": "tests/unit/portfolio/test_allocator.py::TestPortfolioAllocator::test_allocate_capital",
        "test_position_sizing": "tests/unit/portfolio/test_allocator.py::TestPortfolioAllocator::test_position_sizing"
      }
    },
    "backtesting": {
      "unit_tests": [
        "tests/unit/backtest/test_engine_portfolio.py"
      ],
      "integration_tests": [
        "tests/integration/test_backtest_integration.py",
        "tests/integration/test_orchestrator.py"
      ],
      "quick_check": "python -c 'from bot_v2.features.backtest.engine import BacktestEngine'",
      "full_test": "poetry run pytest tests/unit/backtest/ tests/integration/test_backtest_integration.py -v",
      "specific_tests": {
        "test_engine": "tests/unit/backtest/test_engine_portfolio.py::TestEnhancedBacktestEngine",
        "test_orchestrator": "tests/integration/test_orchestrator.py::TestIntegratedOrchestrator"
      }
    },
    "ml_pipeline": {
      "unit_tests": [
        "tests/unit/ml/"
      ],
      "integration_tests": [
        "tests/integration/test_ml_integration.py"
      ],
      "quick_check": "python -c 'from bot_v2.features.ml import models'",
      "full_test": "poetry run pytest tests/unit/ml/ -v",
      "specific_tests": {
        "test_model_import": "python -c 'from bot_v2.features.ml.models.strategy_selector import StrategySelector'"
      }
    },
    "paper_trading": {
      "unit_tests": [],
      "integration_tests": [
        "tests/integration/test_alpaca_integration.py"
      ],
      "quick_check": "python -c 'import alpaca_py; print(\"Alpaca installed\")'",
      "full_test": "poetry run python demos/alpaca_paper_trading_demo.py",
      "specific_tests": {
        "test_demo": "poetry run python demos/alpaca_paper_trading_demo.py"
      }
    },
    "dashboard": {
      "unit_tests": [],
      "integration_tests": [],
      "quick_check": "python -c 'import streamlit; print(streamlit.__version__)'",
      "full_test": "timeout 5 poetry run gpt-trader dashboard || echo 'Dashboard started'",
      "specific_tests": {
        "test_import": "python -c 'from bot_v2.features.dashboard.app import main'"
      }
    }
  },
  "v2_test_commands": {
    "all_v2_slices": "poetry run python src/bot_v2/test_all_slices.py",
    "single_slice": "poetry run python src/bot_v2/test_{slice_name}.py",
    "quick_v2_smoke_test": "poetry run python -c 'from src.bot_v2.features.backtest import *; from src.bot_v2.features.ml_strategy import *; print(\"✅ V2 core slices work\")'",
    "v2_isolation_check": "grep -r 'from bot_v2.features' src/bot_v2/features/ && echo '❌ Isolation violations' || echo '✅ Complete isolation'",
    "v2_slice_health": "for slice in backtest paper_trade analyze optimize ml_strategy market_regime; do echo \"Testing $slice...\"; poetry run python -c \"from src.bot_v2.features.$slice import *\" && echo \"✅ $slice OK\" || echo \"❌ $slice FAIL\"; done",
    "v2_intelligence_test": "poetry run python -c 'from src.bot_v2.features.ml_strategy import predict_best_strategy; from src.bot_v2.features.market_regime import detect_regime; print(\"✅ Intelligence slices work\")'",
    "v2_token_efficiency_test": "echo 'Testing V2 token efficiency (~500 tokens per slice vs 10K+ for V1)'",
    "v2_parallel_slices": "for slice in backtest paper_trade analyze optimize; do poetry run python src/bot_v2/test_$slice.py & done; wait"
  },
  "v1_archived_commands": {
    "note": "V1 commands archived - use v2_test_commands above",
    "all_unit_tests": "poetry run pytest tests/unit/ -v (V1 archived)",
    "all_integration_tests": "poetry run pytest tests/integration/ -v (V1 archived)",
    "quick_smoke_test": "poetry run pytest tests/unit/strategy/test_demo_ma.py tests/unit/dataflow/test_pipeline.py -v (V1 archived)"
  },
  "v2_slice_patterns": {
    "naming": "test_{slice_name}.py (in src/bot_v2/)",
    "slice_structure": "src/bot_v2/features/{slice_name}/",
    "test_pattern": "Direct slice import and functional test",
    "isolation_requirement": "No cross-slice imports allowed"
  },
  "v2_coverage_targets": {
    "backtest_slice": 85,
    "paper_trade_slice": 85,
    "analyze_slice": 85,
    "optimize_slice": 80,
    "ml_strategy_slice": 90,
    "market_regime_slice": 90,
    "live_trade_slice": 75,
    "monitor_slice": 70,
    "data_slice": 80,
    "v2_overall": 85
  },
  "v2_slice_dependencies": {
    "no_dependencies": "V2 slices have complete isolation - no external dependencies",
    "local_implementations": "Each slice implements everything it needs locally",
    "external_packages_only": ["pandas", "numpy", "yfinance", "scikit-learn"],
    "forbidden_cross_imports": "Any import from bot_v2.features.* within slices"
  },
  "v1_archived_sections": {
    "fixture_locations": "tests/fixtures/ (V1 archived)",
    "test_patterns": "V1 patterns (archived)",
    "coverage_targets": "V1 targets (archived)",
    "test_dependencies": "V1 dependencies (archived)"
  },
  "v2_troubleshooting": {
    "slice_import_error": "Check V2 IMPORTS.md - use src.bot_v2.features.{slice} pattern",
    "isolation_violation": "Run isolation_check - no cross-slice imports allowed",
    "slice_not_found": "Check slice exists in src/bot_v2/features/",
    "v1_import_error": "V1 archived - use V2 slice imports only"
  }
}